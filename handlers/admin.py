from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from core import db_manager
from utils import send_message_to_user, get_user_language_safe
import os
import asyncio

router = Router()

ADMIN_ID = int(os.environ.get("ADMIN_ID", "7021944306"))

def is_admin(user_id: int) -> bool:
    if ADMIN_ID == 0:
        print("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    return user_id == ADMIN_ID

@router.message(Command("announce"))
async def announce_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    await message.answer("‚úÖ –ê–¥–º–∏–Ω–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@router.message(Command("announce"))
async def announce_handler(message: Message):
    print("–•–ï–ù–î–õ–ï–† /announce –í–´–ó–í–ê–ù!")
    user_id = message.from_user.id
    print(f"–Æ–∑–µ—Ä {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /announce")
    
    if not is_admin(user_id):
        print("–ù–µ –∞–¥–º–∏–Ω")
        await message.answer("‚ùå –ù–µ –∞–¥–º–∏–Ω")
        return
    
    announcement_text = message.text.replace('/announce', '').strip()
    
    if not announcement_text:
        await message.answer("‚ùå –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç: /announce –≤–∞—à_—Ç–µ–∫—Å—Ç")
        return
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É: {announcement_text}")
    
    db = db_manager.get_db()
    if not db:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        users = await db.get_all_users()
        
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
            
        await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∞—é {len(users)} —é–∑–µ—Ä–∞–º...")
        
        success = 0
        failed = 0
        blocked = 0
        
        for user_id in users:
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —é–∑–µ—Ä—É {user_id}")
            try:
                user_lang = await get_user_language_safe(user_id)
                personalized_text = f"üì¢ {get_announcement_header(user_lang)}:\n\n{announcement_text}"
                
                await send_message_to_user(message.bot, user_id, personalized_text, user_lang)
                success += 1
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É {user_id}")
                
                if success % 10 == 0:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                error_msg = str(e).lower()
                if "blocked" in error_msg or "bot was blocked" in error_msg:
                    blocked += 1
                    print(f"üö´ –Æ–∑–µ—Ä {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                else:
                    failed += 1
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
        
        report = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        report += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        report += f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
        report += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ: {len(users)}"
        
        await message.answer(report)
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@router.message(Command("stats_full"))
async def full_stats_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ –∞–¥–º–∏–Ω")
        return
    
    db = db_manager.get_db()
    if not db:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        global_stats = await db.get_global_statistics()
        
        if not global_stats:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
            
        total_users, total_downloads, total_tracks, total_size = global_stats
        
        stats_text = "üìä **–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"
        stats_text += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n"
        stats_text += f"üì• **–ó–∞–≥—Ä—É–∑–æ–∫:** {total_downloads}\n" 
        stats_text += f"üéµ **–¢—Ä–µ–∫–æ–≤:** {total_tracks}\n"
        stats_text += f"üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.1f} MB\n\n"
        
        if total_users > 0:
            avg_downloads = total_downloads / total_users
            avg_tracks = total_tracks / total_users
            avg_size = total_size / total_users
            
            stats_text += f"üìà **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"
            stats_text += f"‚Ä¢ –ó–∞–≥—Ä—É–∑–æ–∫: {avg_downloads:.1f}\n"
            stats_text += f"‚Ä¢ –¢—Ä–µ–∫–æ–≤: {avg_tracks:.1f}\n"
            stats_text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {avg_size:.1f} MB\n"
        
        await message.answer(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("cleanup"))
async def cleanup_handler(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ –∞–¥–º–∏–Ω")
        return
        
    await message.answer("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞... (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

def get_announcement_header(lang: str) -> str:
    headers = {
        "ua": "–û–ì–û–õ–û–®–ï–ù–ù–Ø",
        "ru": "–û–ë–™–Ø–í–õ–ï–ù–ò–ï", 
        "en": "ANNOUNCEMENT"
    }
    return headers.get(lang, headers["ua"])
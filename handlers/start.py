# handlers/start.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.language_kb import get_language_keyboard, get_agreement_keyboard
from keyboards.main import get_ad_keyboard, get_search_keyboard
from lang_bot.translations import get_text
from core import db_manager
from utils import get_user_language_safe

router = Router()

class UserStates(StatesGroup):
    waiting_for_agreement = State()

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    db = db_manager.get_db()
    
    try:
        user_language = await db.get_user_language(message.from_user.id)
        
        if user_language == 'ua':
            await db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name,
                'ua'
            )
        
        current_state = await state.get_state()
        if current_state:
            await state.clear()
        
        await message.answer(
            get_text("ua", "start_choose"),
            parse_mode="HTML",
            reply_markup=get_language_keyboard()
        )
        await state.set_state(UserStates.waiting_for_agreement)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer(
            "üåç <b>Choose language / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>",
            parse_mode="HTML", 
            reply_markup=get_language_keyboard()
        )
        await state.set_state(UserStates.waiting_for_agreement)

@router.callback_query(F.data.startswith("lang_"), UserStates.waiting_for_agreement)
async def select_language(callback: CallbackQuery, state: FSMContext):
    try:
        lang = callback.data.split("_")[1]
        
        db = db_manager.get_db()
        await db.update_user_language(callback.from_user.id, lang)
        
        await state.update_data(language=lang)
        
        disclaimer_text = get_disclaimer_text(lang)
        await callback.message.edit_text(
            disclaimer_text,
            parse_mode="Markdown",
            reply_markup=get_agreement_keyboard(lang)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ select_language: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("agree_"), UserStates.waiting_for_agreement)
async def process_agreement(callback: CallbackQuery, state: FSMContext):
    try:
        lang = callback.data.split("_")[1]
        user_id = callback.from_user.id
        
        await state.update_data(user_language=lang)
        
        welcome_text = get_text(lang, "welcome")
        main_text = get_text(lang, "main_text")
        
        keyboard = get_ad_keyboard(lang)
        keyboard.inline_keyboard.append([get_search_keyboard(lang).inline_keyboard[0][0]])
        
        await callback.message.edit_text(
            f"{welcome_text}{main_text}",
            reply_markup=keyboard
        )
        
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_agreement: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", show_alert=True)
    finally:
        current_state = await state.get_state()
        if current_state:
            await state.clear()

@router.callback_query(F.data == "subscribed")
async def callback_subscribed(callback: CallbackQuery):
    try:
        lang = await get_user_language_safe(callback.from_user.id)
        alert_text = get_text(lang, "subscribed_alert")
        await callback.answer(alert_text, show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_subscribed: {e}")
        await callback.answer("–°–ø–∞—Å–∏–±–æ!", show_alert=True)

@router.message(Command("test"))
async def test_handler(message: Message):
    print("‚úÖ –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –°–†–ê–ë–û–¢–ê–õ–ê!")
    await message.answer("–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@router.message(Command("help"))
async def help_handler(message: Message):
    try:
        lang = await get_user_language_safe(message.from_user.id)
        help_text = get_text(lang, "main_text")
        await message.answer(help_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ help_handler: {e}")
        await message.answer(get_text("ua", "main_text"))

def get_disclaimer_text(language):
    texts = {
        "ua": "üéµ *–£–ú–û–í–ò –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –¢–ê –î–ò–°–ö–õ–ï–ô–ú–ï–†*\n\n_–Ø —Å—Ç–≤–æ—Ä–∏–≤ —Ü—å–æ–≥–æ –±–æ—Ç–∞ –∑ –¥—É—à–µ—é ‚Äî –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –º—É–∑–∏–∫–∏ –≤ —É–º–æ–≤–∞—Ö –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É_\n\nüíô *–ú–û–Ø –úI–°I–Ø*\n–ù–∞–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ–∂–Ω—ñ–π –ª—é–¥–∏–Ω—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–∏—Å—Ç–∏–π –º—É–∑–∏—á–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–±–æ—ó–≤ –∑ –µ–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è–º.",
        "ru": "üéµ *–£–°–õ–û–í–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ò –î–ò–°–ö–õ–ï–ô–ú–ï–†*\n\n_–Ø —Å–¥–µ–ª–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å –¥—É—à–æ–π ‚Äî –æ–±–µ—Å–ø–µ—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º—É–∑—ã–∫–µ –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞_\n\nüíô *–ú–û–Ø –ú–ò–°–°–ò–Ø*\n–î–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É —Å–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–±–æ–µ–≤ —Å —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ–º.",
        "en": "üéµ *TERMS OF USE AND DISCLAIMER*\n\n_I made this bot with soul ‚Äî to provide access to music during internet outages_\n\nüíô *MY MISSION*\nTo give every person the opportunity to create a personal music reserve to maintain psychological well-being during power outages."
    }
    return texts.get(language, texts["ua"])

–¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—é config.py - —É–±–µ—Ä—É YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
python

import os
import logging

def load_env_file():
    try:
        env_path = os.path.join(os.path.dirname(__file__), '.env')
        if os.path.exists(env_path):
            print(f"üîç –ù–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª")
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        if key not in os.environ:
                            os.environ[key] = value
                            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ .env: {key}")
        else:
            print("üîç .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")

if not os.environ.get("RENDER") and not os.environ.get("KOYEB"):
    load_env_file()

RENDER = "RENDER" in os.environ
KOYEB = "KOYEB" in os.environ  
LOCAL = not RENDER and not KOYEB

DEBUG = os.environ.get("DEBUG", "false").lower() == "true" and not RENDER and not KOYEB
BOT_TOKEN = os.environ.get("BOT_TOKEN", "")

if not BOT_TOKEN:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    if RENDER:
        print("üí° –ù–∞ Render —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    elif KOYEB:
        print("üí° –ù–∞ Koyeb —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    else:
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: BOT_TOKEN=your_token")
    exit(1)

if KOYEB:
    MAX_TRACKS_PER_USER = 12
    MAX_DOWNLOAD_SIZE_MB = 80
    DOWNLOAD_TIMEOUT = 180
    ENABLE_PROXY = False
    LOG_LEVEL = "INFO"
    print("üéØ –†–µ–∂–∏–º: KOYEB")

elif RENDER:
    MAX_TRACKS_PER_USER = 5
    MAX_DOWNLOAD_SIZE_MB = 25
    DOWNLOAD_TIMEOUT = 90
    ENABLE_PROXY = False
    LOG_LEVEL = "INFO"
    print("üéØ –†–µ–∂–∏–º: RENDER")

else:
    MAX_DOWNLOAD_SIZE_MB = int(os.environ.get("MAX_DOWNLOAD_SIZE_MB", "100"))
    MAX_TRACKS_PER_USER = int(os.environ.get("MAX_TRACKS_PER_USER", "20"))
    DOWNLOAD_TIMEOUT = int(os.environ.get("DOWNLOAD_TIMEOUT", "300"))
    ENABLE_PROXY = False
    LOG_LEVEL = os.environ.get("LOG_LEVEL", "DEBUG")
    print("üéØ –†–µ–∂–∏–º: LOCAL")

ADMIN_ID = int(os.environ.get("ADMIN_ID", "7021944306"))
ENABLE_YOUTUBE_DEBUG = False
SAVE_DOWNLOADED_FILES = False

AD_MESSAGE = {
    "ua": "üì¢ *–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º—ñ–π –∫–∞–Ω–∞–ª!*",
    "ru": "üì¢ *–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª!*", 
    "en": "üì¢ *Subscribe to my channel!*"
}

def setup_logging():
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL),
        format=log_format,
        handlers=[logging.StreamHandler()]
    )
    
    logging.getLogger('yt-dlp').setLevel(logging.ERROR)
    logging.getLogger('aiohttp').setLevel(logging.WARNING)

def print_startup_info():
    print("=" * 50)
    print("üöÄ MUSIC BOT")
    print("=" * 50)
    
    if KOYEB:
        print("üìç –•–æ—Å—Ç–∏–Ω–≥: KOYEB üÜï")
    elif RENDER:
        print("üìç –•–æ—Å—Ç–∏–Ω–≥: RENDER")
    else:
        print("üìç –•–æ—Å—Ç–∏–Ω–≥: LOCAL")
        
    print(f"üéµ –ú–∞–∫—Å. —Ç—Ä–µ–∫–æ–≤: {MAX_TRACKS_PER_USER}")
    print(f"üíæ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: {MAX_DOWNLOAD_SIZE_MB}MB")
    print(f"‚è± –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {DOWNLOAD_TIMEOUT}—Å–µ–∫")
    print(f"ü§ñ –ë–æ—Ç: ACTIVE ‚úÖ")
    print("=" * 50)

setup_logging()
print_startup_info()
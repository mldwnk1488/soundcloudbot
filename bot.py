import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramForbiddenError, TelegramUnauthorizedError
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start_health_server(port=10000):
    """Health check —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render"""
    try:
        from aiohttp import web
        
        app = web.Application()
        
        async def health_check(request):
            return web.json_response({"status": "healthy", "service": "music-bot"})
        
        app.router.add_get('/health', health_check)
        app.router.add_get('/', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        
        logger.info(f"üåê Health server started on port {port}")
        return runner
    except ImportError:
        logger.warning("‚ö†Ô∏è aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, health server –æ—Ç–∫–ª—é—á–µ–Ω")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health server: {e}")
        return None

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: @{bot_info.username}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        try:
            from handlers.start import router as start_router
            from handlers.search import router as search_router
            from handlers.download import router as download_router
            from handlers.queue import router as queue_router
            from handlers.admin import router as admin_router
            
            dp.include_router(start_router)
            dp.include_router(search_router)
            dp.include_router(download_router)
            dp.include_router(queue_router)
            dp.include_router(admin_router)
            
            logger.info("‚úÖ –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º health server
        health_runner = await start_health_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üéµ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
        
    except TelegramUnauthorizedError:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π BOT_TOKEN! –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω –≤ @BotFather")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if 'health_runner' in locals() and health_runner:
            await health_runner.cleanup()
        if 'bot' in locals():
            await bot.session.close()
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())

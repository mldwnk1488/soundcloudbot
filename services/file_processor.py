import zipfile
import os
import math

def create_zip(source_dir, zip_path):
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(source_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if os.path.exists(file_path) and os.path.isfile(file_path):
                        arcname = os.path.relpath(file_path, source_dir)
                        zipf.write(file_path, arcname)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP: {e}")
        return False

def get_files_in_directory(directory):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    files = []
    try:
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(directory):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")
            return files
            
        for item in os.listdir(directory):
            item_path = os.path.join(directory, item)
            if os.path.isfile(item_path):
                files.append(item)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
    return files

def create_zip_parts(source_dir, zip_base_path, max_part_size=45*1024*1024):
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 45MB"""
    current_zip = None
    zip_parts = []
    
    try:
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–∞
        if not os.path.exists(source_dir):
            print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {source_dir}")
            return []
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        all_files = []
        for root, dirs, files in os.walk(source_dir):
            for file in files:
                file_path = os.path.join(root, file)
                if os.path.exists(file_path) and os.path.isfile(file_path):
                    all_files.append((file, file_path))
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        if not all_files:
            print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
            return []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏)
        all_files.sort(key=lambda x: os.path.getsize(x[1]))
        
        part_num = 1
        current_part_size = 0
        
        for file_name, file_path in all_files:
            file_size = os.path.getsize(file_path)
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
            if not os.access(file_path, os.R_OK):
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {file_name}")
                continue
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–∞–º –ø–æ —Å–µ–±–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —á–∞—Å—Ç–∏
            if file_size > max_part_size:
                print(f"‚ö†Ô∏è –§–∞–π–ª {file_name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size/1024/1024:.1f}MB), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            if current_zip is None or current_part_size + file_size > max_part_size:
                if current_zip is not None:
                    current_zip.close()
                    current_zip = None
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                current_zip_path = f"{zip_base_path}.part{part_num:03d}.zip"
                try:
                    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º with –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    current_zip = zipfile.ZipFile(current_zip_path, 'w', zipfile.ZIP_DEFLATED)
                    zip_parts.append(current_zip_path)
                    current_part_size = 0
                    part_num += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞ {current_zip_path}: {e}")
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            try:
                arcname = file_name
                current_zip.write(file_path, arcname)
                current_part_size += file_size
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_name} –≤ –∞—Ä—Ö–∏–≤: {e}")
                continue
        
        return zip_parts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–µ–π –∞—Ä—Ö–∏–≤–∞: {e}")
        return []
    finally:
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ZIP —Ñ–∞–π–ª–∞
        if current_zip is not None:
            try:
                current_zip.close()
            except:
                pass

def cleanup_zip_parts(zip_parts):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ ZIP —á–∞—Å—Ç–∏"""
    for part_path in zip_parts:
        try:
            if os.path.exists(part_path):
                os.remove(part_path)
                print(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {part_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {part_path}: {e}")

class FileProcessor:
    def create_zip(self, source_dir, zip_path):
        return create_zip(source_dir, zip_path)
    
    def get_files_in_directory(self, directory):
        return get_files_in_directory(directory)
    
    def create_zip_parts(self, source_dir, zip_base_path, max_part_size=45*1024*1024):
        return create_zip_parts(source_dir, zip_base_path, max_part_size)
    
    def cleanup_zip_parts(self, zip_parts):
        """üî• –î–û–ë–ê–í–õ–ï–ù–û: –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        cleanup_zip_parts(zip_parts)

file_processor = FileProcessor()
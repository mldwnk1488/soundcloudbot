import yt_dlp
import asyncio
import logging
import hashlib
import re

logger = logging.getLogger(__name__)

class ImprovedSoundCloudSearch:
    def __init__(self):
        self.ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'ignoreerrors': True,
        }
    
    async def search_tracks(self, query, limit=30):  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–æ 30
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"""
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫: {query} (–ª–∏–º–∏—Ç: {limit})")
            
            search_url = f"scsearch{limit}:{query}"
            
            loop = asyncio.get_event_loop()
            with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:
                info = await loop.run_in_executor(
                    None, 
                    lambda: ydl.extract_info(search_url, download=False)
                )
            
            if not info or 'entries' not in info:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                return []
            
            tracks = []
            for entry in info['entries']:
                if entry:
                    track = self._improved_parse_track_info(entry)
                    if track:
                        tracks.append(track)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
            return tracks
            
        except Exception as e:
            logger.error(f"‚ùå Search error: {e}")
            return []
    
    def _improved_parse_track_info(self, entry, lang="ru"):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    try:
        from lang_bot.translations import get_text
        
        track_url = entry.get('webpage_url', '')
        track_id = hashlib.md5(track_url.encode()).hexdigest() if track_url else str(entry.get('id', ''))
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = entry.get('title', get_text(lang, 'unknown')).strip()
        uploader = entry.get('uploader', get_text(lang, 'unknown_artist')).strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        artist, clean_title = self._extract_artist_from_title(title, uploader, lang)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = entry.get('duration', 0)
        if isinstance(duration, (int, float)) and duration > 0:
            duration_ms = int(duration * 1000)
            minutes = duration_ms // 60000
            seconds = (duration_ms % 60000) // 1000
            duration_formatted = f"{minutes}:{seconds:02d}"
        else:
            duration_ms = 0
            duration_formatted = "0:00"
        
        track = {
            'id': track_id,
            'title': clean_title,
            'artist': artist,
            'duration': duration_ms,
            'permalink_url': track_url,
            'artwork_url': entry.get('thumbnail'),
            'streamable': True,
            'duration_formatted': duration_formatted,
            'original_title': title
        }
        
        return track
        
    except Exception as e:
        logger.error(f"‚ùå Error parsing track: {e}")
        return None

def _extract_artist_from_title(self, title, uploader, lang="ru"):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
    from lang_bot.translations import get_text
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞
    patterns = [
        r'^(.*?)\s*[-‚Äì‚Äî]\s*(.*)$',  # "Artist - Title"
        r'^(.*?)\s*[|]\s*(.*)$',    # "Artist | Title"
        r'^(.*?)\s*:\s*(.*)$',      # "Artist: Title"
        r'^(.*?)\s*¬´(.*)¬ª$',        # "Artist ¬´Title¬ª"
        r'^(.*?)\s*"(.*)"$',        # 'Artist "Title"'
    ]
    
    for pattern in patterns:
        match = re.match(pattern, title)
        if match:
            artist = match.group(1).strip()
            clean_title = match.group(2).strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞—Ä—Ç–∏—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(artist) < 50 and len(clean_title) > 3:
                return artist, clean_title
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º uploader –∫–∞–∫ –∞—Ä—Ç–∏—Å—Ç–∞
    if uploader and uploader != get_text(lang, 'unknown_artist'):
        return uploader, title
    else:
        return self._fallback_artist_extraction(title, lang)

def _fallback_artist_extraction(self, title, lang="ru"):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞"""
    from lang_bot.translations import get_text
    
    # –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ "Artist, Title"
    if ',' in title:
        parts = title.split(',', 1)
        if len(parts[0]) < 30:
            return parts[0].strip(), parts[1].strip()
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    if len(title) > 40:
        for separator in [' - ', ' | ', ' : ']:
            if separator in title[:30]:
                parts = title.split(separator, 1)
                return parts[0].strip(), parts[1].strip()
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Unknown Artist –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    return get_text(lang, "unknown_artist"), title
    
    async def get_track_info(self, track_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—Ä–µ–∫–µ"""
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ: {track_url}")
            
            loop = asyncio.get_event_loop()
            with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:
                info = await loop.run_in_executor(
                    None, 
                    lambda: ydl.extract_info(track_url, download=False)
                )
            
            if not info:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ")
                return None
            
            track = self._improved_parse_track_info(info)
            if track:
                logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {track['title']} - {track['artist']}")
            return track
            
        except Exception as e:
            logger.error(f"‚ùå Get track info error: {e}")
            return None

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–π
search_engine = ImprovedSoundCloudSearch()